{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["addContact","createAction","data","payload","id","nanoid","name","number","deleteContact","changeFilter","items","createReducer","state","filter","_","combineReducers","midlewareCFG","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","middleware","getDefaultMiddleware","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","className","s","form","onSubmit","event","preventDefault","alert","title","input","type","value","onChange","target","trimLeft","button","getFilter","getVisibleContacts","createSelector","contact","toLowerCase","includes","Contacts","useSelector","list","map","listItem","num","onClick","Filter","trim","App","ReactDOM","render","StrictMode","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.8b8a654b.chunk.js","sourcesContent":["import { createAction, nanoid } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add', data => ({\n  payload: {\n    id: nanoid(),\n    name: data.name,\n    number: data.number,\n  },\n}));\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// import shortid from 'shortid';\n// import types from './contacts-types';\n\n// const addContact = data => ({\n//   type: types.ADD,\n// payload: {\n//   id: shortid.generate(),\n//   name: data.name,\n//   number: data.number,\n// },\n// });\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// const actions = { addContact, deleteContact, changeFilter };\n\n// export default actions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\n\nconst items = createReducer(\n  [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  {\n    [addContact]: (state, { payload }) => [...state, payload],\n    [deleteContact]: (state, { payload }) =>\n      state.filter(({ id }) => id !== payload),\n  },\n);\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// import types from './contacts-types';\n\n// const items = (\n// state = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ],\n//   { type, payload },\n// ) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","import contactsReducer from './contacts/contacts-reducer';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst midlewareCFG = {\n  serializableCheck: {\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  },\n};\n\nlet middleware = getDefaultMiddleware(midlewareCFG);\nif (process.env.NODE_ENV === 'development') {\n  middleware = [...getDefaultMiddleware(midlewareCFG), logger];\n}\n\nconst contactsPersistConfig = {\n  key: 'PhoneBookRedux',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nexport const persistor = persistStore(store);\n\n// export default store;\n\n// import { combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n// const store = createStore(rootReducer, composeWithDevTools());\n","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-actions';\n// import PropTypes from 'prop-types';\n// import actions from '../../redux/contacts/contacts-actions';\n// import { connect } from 'react-redux';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleNameChange = ({ target }) => {\n    setName(target.value.trimLeft());\n  };\n  const handleNumberChange = ({ target }) => {\n    setNumber(target.value.trimLeft());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (name === '') {\n      alert('Name required');\n      return;\n    }\n    if (number === '') {\n      alert('Number required');\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    // onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.title}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label className={s.title}>\n        Number\n        <input\n          className={s.input}\n          type=\"text\"\n          value={number}\n          onChange={handleNumberChange}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = () => ({});\n// ;\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: data => dispatch(actions.addContact(data)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  },\n);\n\n// export const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const visibleContacts = contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n//   return visibleContacts;\n// };\n","import s from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n// import PropTypes from 'prop-types';\n// import actions from '../../redux/contacts/contacts-actions';\n// import { connect } from 'react-redux';\n\nexport default function Contacts() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => {\n          return (\n            <li key={id} className={s.listItem}>\n              <span className={s.name}>{name}:</span>\n              <span className={s.num}>{number}</span>\n              <button\n                className={s.button}\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                {/* onClick={() => onDeleteContact(id)}> */}\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\n// Contacts.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string,\n//       name: PropTypes.string,\n//       number: PropTypes.string,\n//     }),\n//   ).isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.contacts.items,\n//     filter: state.contacts.filter,\n//   };\n// };\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n// import PropTypes from 'prop-types';\n// import actions from '../../redux/contacts/contacts-actions';\n// import { connect } from 'react-redux';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    dispatch(changeFilter(target.value.trim()));\n    // onChange(target.value);\n  };\n\n  return <input type=\"text\" value={filter} onChange={handleChange} />;\n}\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: value => dispatch(actions.changeFilter(value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };\n","import ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__ayix2\",\"title\":\"ContactForm_title__3yPr1\",\"input\":\"ContactForm_input__3rK-V\",\"button\":\"ContactForm_button__2SQN-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2Mvv7\",\"listItem\":\"ContactList_listItem__2hEjQ\",\"name\":\"ContactList_name__1iVld\",\"num\":\"ContactList_num__JdRYn\",\"button\":\"ContactList_button__1StbA\"};"],"sourceRoot":""}